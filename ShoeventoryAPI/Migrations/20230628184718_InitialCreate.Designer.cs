// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeventoryAPI.Data;

#nullable disable

namespace ShoeventoryAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230628184718_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShoeventoryAPI.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoeCollectionId")
                        .HasColumnType("int");

                    b.Property<string>("ShoeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShoeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShoePrice")
                        .HasColumnType("float");

                    b.Property<int>("ShoeQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoeSize")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoeCollectionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.ShoeCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<string>("ShoeCollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.ToTable("ShoeCollections");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.SoldShoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ShoeId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeQuantity")
                        .HasColumnType("int");

                    b.Property<double>("ShoeSize")
                        .HasColumnType("float");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SoldShoes");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("ShoeCollectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ShoeCollectionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Shoe", b =>
                {
                    b.HasOne("ShoeventoryAPI.Models.ShoeCollection", "ShoeCollection")
                        .WithMany()
                        .HasForeignKey("ShoeCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeventoryAPI.Models.Transaction", null)
                        .WithMany("Shoes")
                        .HasForeignKey("TransactionId");

                    b.Navigation("ShoeCollection");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.ShoeCollection", b =>
                {
                    b.HasOne("ShoeventoryAPI.Models.Merchant", "Merchant")
                        .WithMany("ShoeCollections")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.SoldShoe", b =>
                {
                    b.HasOne("ShoeventoryAPI.Models.Shoe", "Shoe")
                        .WithMany()
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeventoryAPI.Models.Transaction", "Transaction")
                        .WithMany("SoldShoes")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Transaction", b =>
                {
                    b.HasOne("ShoeventoryAPI.Models.Merchant", "Merchant")
                        .WithMany("Transactions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ShoeventoryAPI.Models.ShoeCollection", "ShoeCollection")
                        .WithMany("Transactions")
                        .HasForeignKey("ShoeCollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("ShoeCollection");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Merchant", b =>
                {
                    b.Navigation("ShoeCollections");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.ShoeCollection", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ShoeventoryAPI.Models.Transaction", b =>
                {
                    b.Navigation("Shoes");

                    b.Navigation("SoldShoes");
                });
#pragma warning restore 612, 618
        }
    }
}
